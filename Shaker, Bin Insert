void shekerSort(double *mass, int count)
{
  int left = 0, right = count - 1; // левая и правая границы сортируемой области массива
  int flag = 1;  // флаг наличия перемещений
  // Выполнение цикла пока левая граница не сомкнётся с правой
  // и пока в массиве имеются перемещения
  while ((left < right) && flag > 0)
  {
    flag = 0;
    for (int i = left; i<right; i++)  //двигаемся слева направо
    {
      if (mass[i]>mass[i + 1]) // если следующий элемент меньше текущего,
      {             // меняем их местами
        double t = mass[i];
        mass[i] = mass[i + 1];
        mass[i + 1] = t;
        flag = 1;      // перемещения в этом цикле были
      }
    }
    right--; // сдвигаем правую границу на предыдущий элемент
    for (int i = right; i>left; i--)  //двигаемся справа налево
    {
      if (mass[i - 1]>mass[i]) // если предыдущий элемент больше текущего,
      {            // меняем их местами
        double t = mass[i];
        mass[i] = mass[i - 1];
        mass[i - 1] = t;
        flag = 1;    // перемещения в этом цикле были
      }
    }
    left++; // сдвигаем левую границу на следующий элемент
  }
}


void sort_bin_insert (int *a, int n) // Сортировка бинарными вставками

  { int x,left,right,sred;

      for (int i=1; i<n; i++){

          if (a[i-1]>a[i])

          {

              x=a[i]; // x – включаемый элемент

              left=0; // левая граница отсортированной части массива

              right=i-1; // правая граница отсортированной части массива

            do {

                    sred = (left+right)/2; // sred – новая "середина" последовательности

                    if (a[sred]<x ) left= sred+1;

                    else right=sred-1;

           } 
           while (left<=right); // поиск ведется до тех пор, пока левая граница не окажется правее правой границы

                    for (int j=i-1; j>=left;j--) 
                          a[j+1]= a[j];

                      a[left]= x;

                    }

                    }

                    }
